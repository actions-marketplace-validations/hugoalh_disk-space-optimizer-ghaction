name: "Disk Space Optimizer"
author: "hugoalh"
description: "Optimize disk space for GitHub hosted runner."
inputs:
  input_listdelimiter:
    description: "{RegEx} Delimiter when the input is type of list."
    required: false
    default: ",|;|\\r?\\n"
  remove_soft:
    description: "{RegEx[]} Remove item softly."
    required: false
    default: |-
      .+
  remove_hard:
    description: "{RegEx[]} Remove item hardly, can cause more issues than soft remove."
    required: false
    default: ""
runs:
  using: "composite"
  steps:
    - name: "Setup PowerShell Toolkit"
      uses: "hugoalh-studio/setup-powershell-toolkit-ghaction@v1.2.3"
    - name: "Main"
      run: |
        #Requires -PSEdition Core -Version 7.2
        Import-Module -Name 'hugoalh.GitHubActionsToolkit' -Scope 'Local'
        Test-GitHubActionsEnvironment -Mandatory
        Write-Host -Object 'Import inputs.'
        [Boolean]$OsLinux = $IsLinux -or $Env:RUNNER_OS -ieq 'Linux'
        [Boolean]$OsMac = $IsMacOS -or $Env:RUNNER_OS -ieq 'macOS'
        [Boolean]$OsWindows = $IsWindows -or $Env:RUNNER_OS -ieq 'Windows'
        [String]$InputListDelimiter = '${{inputs.input_listdelimiter}}'
        If ($InputListDelimiter.Length -eq 0) {
          Write-GitHubActionsFail -Message 'Input `input_listdelimiter` is not defined!'
        }
        [AllowEmptyCollection()][String[]]$RemoveSoft = @'
        ${{inputs.remove_soft}}
        '@ -isplit $InputListDelimiter ?? @()
        [AllowEmptyCollection()][String[]]$RemoveHard = @'
        ${{inputs.remove_hard}}
        '@ -isplit $InputListDelimiter ?? @()
        Function Show-DiskSpace {
          [CmdletBinding()]
          [OutputType([Void])]
          Param ()
          If ($OsLinux -or $OsMac) {
            df -h |
              Write-Host
          }
          ElseIf ($OsWindows) {
            Get-Volume |
              Out-String -Width 120 |
              Write-Host
          }
        }
        Function Test-StringMatchRegEx {
          [CmdletBinding()]
          [OutputType([Boolean])]
          Param (
            [Parameter(Mandatory = $True, Position = 0)][String]$Item,
            [Parameter(Mandatory = $True, Position = 1)][AllowEmptyCollection()][Alias('Matchers')][RegEx[]]$Matcher
          )
          ForEach ($_M In $Matcher) {
            If ($Item -imatch $_M) {
              Write-Output -InputObject $True
              Return
            }
          }
          Write-Output -InputObject $False
        }
        Write-Host -Object 'Before: '
        Show-DiskSpace
        $Script:ErrorActionPreference = 'Continue'
        If ($OsLinux -and (Test-StringMatchRegEx -Item 'AzureCli' -Matcher $RemoveSoft)) {
          sudo apt-get --assume-yes remove azure-cli
        }
        If (Test-StringMatchRegEx -Item 'DockerImages' -Matcher $RemoveSoft) {
          If ($OsLinux) {
            sudo docker image prune --all --force
          }
          Else {
            docker image prune --all --force
          }
        }
        If ($OsLinux -and (Test-StringMatchRegEx -Item 'DotNet' -Matcher $RemoveSoft)) {
          sudo apt-get --assume-yes remove '^dotnet-.*'
        }
        If ($OsLinux -and (Test-StringMatchRegEx -Item 'Firefox' -Matcher $RemoveSoft)) {
          sudo apt-get --assume-yes remove firefox
        }
        If ($OsLinux -and (Test-StringMatchRegEx -Item 'GoogleChrome' -Matcher $RemoveSoft)) {
          sudo apt-get --assume-yes remove google-chrome-stable
        }
        If ($OsLinux -and (Test-StringMatchRegEx -Item 'GoogleCloudSdk' -Matcher $RemoveSoft)) {
          sudo apt-get --assume-yes remove google-cloud-sdk
        }
        If ($OsLinux -and (Test-StringMatchRegEx -Item 'Llvm' -Matcher $RemoveSoft)) {
          sudo apt-get --assume-yes remove '^llvm-.*'
        }
        If ($OsLinux -and (Test-StringMatchRegEx -Item 'Mono' -Matcher $RemoveSoft)) {
          sudo apt-get --assume-yes remove mono-devel
        }
        If ($OsLinux -and (Test-StringMatchRegEx -Item 'MySql' -Matcher $RemoveSoft)) {
          sudo apt-get --assume-yes remove '^mysql-.*'
        }
        If ($OsLinux -and (Test-StringMatchRegEx -Item 'MongoDb' -Matcher $RemoveSoft)) {
          sudo apt-get --assume-yes remove '^mongodb-.*'
        }
        If ($OsLinux -and (Test-StringMatchRegEx -Item 'OpenGlDri' -Matcher $RemoveSoft)) {
          sudo apt-get --assume-yes remove libgl1-mesa-dri
        }
        If ($OsLinux -and (Test-StringMatchRegEx -Item 'Php' -Matcher $RemoveSoft)) {
          sudo apt-get --assume-yes remove 'php.*'
        }
        If ($OsLinux) {
          sudo apt-get --assume-yes autoremove
          sudo apt-get --assume-yes clean
        }
        If (
          (Test-StringMatchRegEx -Item 'AndroidLibrary' -Matcher $RemoveHard) -or
          (Test-StringMatchRegEx -Item 'AndroidSdk' -Matcher $RemoveHard)
        ) {
          If ($Null -ine $Env:ANDROID_SDK_ROOT) {
            Get-ChildItem -LiteralPath $Env:ANDROID_SDK_ROOT -Force -ErrorAction 'Continue' |
              Remove-Item -Recurse -Force -Confirm:$False -ErrorAction 'Continue'
          }
          If ($OsLinux) {
            Get-ChildItem -LiteralPath '/usr/local/lib/android' -Force -ErrorAction 'Continue' |
              Remove-Item -Recurse -Force -Confirm:$False -ErrorAction 'Continue'
          }
        }
        If ($OsLinux -and (Test-StringMatchRegEx -Item 'DotNet' -Matcher $RemoveHard)) {
          Get-ChildItem -LiteralPath '/usr/share/dotnet' -Force -ErrorAction 'Continue' |
            Remove-Item -Recurse -Force -Confirm:$False -ErrorAction 'Continue'
        }
        If ($OsLinux -and (Test-StringMatchRegEx -Item 'HaskellGhc' -Matcher $RemoveHard)) {
          Get-ChildItem -LiteralPath @('/opt/ghc', '/usr/local/.ghcup/ghc') -Force -ErrorAction 'Continue' |
            Remove-Item -Recurse -Force -Confirm:$False -ErrorAction 'Continue'
        }
        If ($OsLinux -and (Test-StringMatchRegEx -Item 'RunnerBoost' -Matcher $RemoveHard)) {
          Get-ChildItem -LiteralPath '/usr/local/share/boost' -Force -ErrorAction 'Continue' |
            Remove-Item -Recurse -Force -Confirm:$False -ErrorAction 'Continue'
        }
        If (Test-StringMatchRegEx -Item 'RunnerToolsCache/CodeQl' -Matcher $RemoveHard) {
          If ($Null -ine $Env:AGENT_TOOLSDIRECTORY) {
            Get-ChildItem -LiteralPath (Join-Path -Path $Env:AGENT_TOOLSDIRECTORY -ChildPath 'CodeQL') -Force -ErrorAction 'Continue' |
              Remove-Item -Recurse -Force -Confirm:$False -ErrorAction 'Continue'
          }
          If ($OsLinux) {
            Get-ChildItem -LiteralPath '/opt/hostedtoolcache/CodeQL' -Force -ErrorAction 'Continue' |
              Remove-Item -Recurse -Force -Confirm:$False -ErrorAction 'Continue'
          }
        }
        If (Test-StringMatchRegEx -Item 'RunnerToolsCache/Go' -Matcher $RemoveHard) {
          If ($Null -ine $Env:AGENT_TOOLSDIRECTORY) {
            Get-ChildItem -LiteralPath (Join-Path -Path $Env:AGENT_TOOLSDIRECTORY -ChildPath 'go') -Force -ErrorAction 'Continue' |
              Remove-Item -Recurse -Force -Confirm:$False -ErrorAction 'Continue'
          }
          If ($OsLinux) {
            Get-ChildItem -LiteralPath '/opt/hostedtoolcache/go' -Force -ErrorAction 'Continue' |
              Remove-Item -Recurse -Force -Confirm:$False -ErrorAction 'Continue'
          }
        }
        If (Test-StringMatchRegEx -Item 'RunnerToolsCache/All' -Matcher $RemoveHard) {
          If ($Null -ine $Env:AGENT_TOOLSDIRECTORY) {
            Get-ChildItem -LiteralPath $Env:AGENT_TOOLSDIRECTORY -Force -ErrorAction 'Continue' |
              Remove-Item -Recurse -Force -Confirm:$False -ErrorAction 'Continue'
          }
          If ($OsLinux) {
            Get-ChildItem -LiteralPath '/opt/hostedtoolcache' -Force -ErrorAction 'Continue' |
              Remove-Item -Recurse -Force -Confirm:$False -ErrorAction 'Continue'
          }
        }
        If (Test-StringMatchRegEx -Item 'Swift' -Matcher $RemoveHard) {
          If ($Null -ine $Env:SWIFT_PATH) {
            Get-ChildItem -LiteralPath $Env:SWIFT_PATH -Force -ErrorAction 'Continue' |
              Remove-Item -Recurse -Force -Confirm:$False -ErrorAction 'Continue'
          }
          If ($OsLinux) {
            Get-ChildItem -LiteralPath '/usr/share/swift' -Force -ErrorAction 'Continue' |
              Remove-Item -Recurse -Force -Confirm:$False -ErrorAction 'Continue'
          }
        }
        If ($OsLinux -and (Test-StringMatchRegEx -Item 'Swap' -Matcher $RemoveHard)) {
          sudo swapoff -a
          sudo rm -f /mnt/swapfile
        }
        $Script:ErrorActionPreference = 'Stop'
        Write-Host -Object 'After: '
        Show-DiskSpace
        $LASTEXITCODE = 0
      shell: "pwsh"
      continue-on-error: true
branding:
  icon: "hard-drive"
  color: "green"
